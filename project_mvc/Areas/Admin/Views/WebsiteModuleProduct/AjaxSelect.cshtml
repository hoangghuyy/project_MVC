@using project_mvc.Helpers
@model project_mvc.Areas.Admin.ViewModels.WebsiteModuleProductViewModel;



@* <div class="w_searchgr form-inline">
            <input type="text" class="form-control title" name="Keyword" id="Keyword" value="" placeholder="Tìm kiếm" style="width:calc(100% - 165px);">
            <select id="Category" class="form-control" style="width: 161px">
                <option value="">-- Chọn</option>
                <option value="1"> đã chọn</option>
                <option value="0"> chưa chọn</option>
            </select>
        </div>
        <div class="badge badge-default" style="margin-bottom:10px;cursor:pointer;" id="RemoveAllM">Xóa đã chọn</div> *@
<table id="tblGridAjax" class="table table-hover tblGridAjax ">
	<thead>
		<tr role="row">
			<th>Tên</th>
			<th class="text-center wd80">Trạng thái</th>
			<th class="text-center wd50">
				<input type="checkbox" class="minimal checkAll" value="">
				<label for="checkAll"></label>
			</th>
		</tr>
	</thead>
	<tbody>
		@if (Model.ListModuleProduct != null && Model.ListModuleProduct.Count > 0)
		{
			foreach (var item in Model.ListModuleProduct.Where(x => x.ParentId == 0))
			{
				<tr id="item_@(item.Id)">
					<td class="open-child active" data-id="@item.Id" data-level="1">
						<span class="lnr lnr-chevron-down" style="margin-right: 5px;">
							<svg class="icon-20" width="20" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
								<path d="M10.869 16.6308C10.811 16.5743 10.563 16.3609 10.359 16.1622C9.076 14.9971 6.976 11.9576 6.335 10.3668C6.232 10.1252 6.014 9.51437 6 9.18802C6 8.8753 6.072 8.5772 6.218 8.29274C6.422 7.93814 6.743 7.65368 7.122 7.49781C7.385 7.39747 8.172 7.2416 8.186 7.2416C9.047 7.08573 10.446 7 11.992 7C13.465 7 14.807 7.08573 15.681 7.21335C15.695 7.22796 16.673 7.38383 17.008 7.55431C17.62 7.86702 18 8.47784 18 9.13151V9.18802C17.985 9.61374 17.605 10.509 17.591 10.509C16.949 12.0141 14.952 14.9834 13.625 16.1768C13.625 16.1768 13.284 16.5129 13.071 16.659C12.765 16.887 12.386 17 12.007 17C11.584 17 11.19 16.8724 10.869 16.6308Z" fill="currentColor"></path>
							</svg>
						</span>
						@Html.Raw(Utility.DisplayShowName(item.Name, item.IsShow))
						@if (Model.ListModuleProduct.Count(x => x.ParentId == item.Id) > 0)
						{
							<span class="badge bg-danger" style="margin-left:5px;">@Model.ListModuleProduct.Count(x => x.ParentId == item.Id)</span>
						}
					</td>
					<td class="text-center">@Html.Raw(StaticEnum.Show(item.IsShow))</td>
					<td class="text-center">
						<input type="checkbox" id="Check@(item.Id)" data-type="product" data-title="@item.Name" class="minimal check" @(("," + Model.selectedValue + ",").Contains("," + item.Id + ",") ? "checked" : string.Empty) value="@item.Id">
						<label for="Check@(item.Id)"></label>
					</td>
				</tr>
				foreach (var child in Model.ListModuleProduct.Where(x => x.ParentId == item.Id).OrderBy(x => x.OrderDisplay))
				{
					<tr id="item_@(child.Id)" class="child-@item.Id level-1" data-id="@item.Id">
						<td class="open-child active" data-id="@child.Id" data-level="2" style="padding-left: 50px">
							<span class="lnr lnr-chevron-down" style="margin-right: 5px;">
								<svg class="icon-20" width="20" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
									<path d="M10.869 16.6308C10.811 16.5743 10.563 16.3609 10.359 16.1622C9.076 14.9971 6.976 11.9576 6.335 10.3668C6.232 10.1252 6.014 9.51437 6 9.18802C6 8.8753 6.072 8.5772 6.218 8.29274C6.422 7.93814 6.743 7.65368 7.122 7.49781C7.385 7.39747 8.172 7.2416 8.186 7.2416C9.047 7.08573 10.446 7 11.992 7C13.465 7 14.807 7.08573 15.681 7.21335C15.695 7.22796 16.673 7.38383 17.008 7.55431C17.62 7.86702 18 8.47784 18 9.13151V9.18802C17.985 9.61374 17.605 10.509 17.591 10.509C16.949 12.0141 14.952 14.9834 13.625 16.1768C13.625 16.1768 13.284 16.5129 13.071 16.659C12.765 16.887 12.386 17 12.007 17C11.584 17 11.19 16.8724 10.869 16.6308Z" fill="currentColor"></path>
								</svg>
							</span>
							@Html.Raw(Utility.DisplayShowName(child.Name, child.IsShow))
							@if (Model.ListModuleProduct.Count(x => x.ParentId == child.Id) > 0)
							{
								<span class="badge bg-danger" style="margin-left:5px;">@Model.ListModuleProduct.Count(x => x.ParentId == child.Id)</span>
							}
						</td>
						<td class="text-center">@Html.Raw(StaticEnum.Show(child.IsShow))</td>
						<td class="text-center">
							<input type="checkbox" id="Check@(child.Id)" data-type="product" data-title="@child.Name" class="minimal check" @(("," + Model.selectedValue + ",").Contains("," + child.Id + ",") ? "checked" : string.Empty) value="@child.Id">
							<label for="Check@(child.Id)"></label>
						</td>
					</tr>
					foreach (var child2 in Model.ListModuleProduct.Where(x => x.ParentId == child.Id).OrderBy(x => x.OrderDisplay))
					{
						<tr id="item_@(child2.Id)" class="child-@item.Id child-@child.Id level-2" data-id="@child.Id">
							<td class="open-child active" data-id="@child2.Id" data-level="3" style="padding-left:100px">
								<span class="lnr lnr-chevron-down" style="margin-right: 5px;">
									<svg class="icon-20" width="20" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
										<path d="M10.869 16.6308C10.811 16.5743 10.563 16.3609 10.359 16.1622C9.076 14.9971 6.976 11.9576 6.335 10.3668C6.232 10.1252 6.014 9.51437 6 9.18802C6 8.8753 6.072 8.5772 6.218 8.29274C6.422 7.93814 6.743 7.65368 7.122 7.49781C7.385 7.39747 8.172 7.2416 8.186 7.2416C9.047 7.08573 10.446 7 11.992 7C13.465 7 14.807 7.08573 15.681 7.21335C15.695 7.22796 16.673 7.38383 17.008 7.55431C17.62 7.86702 18 8.47784 18 9.13151V9.18802C17.985 9.61374 17.605 10.509 17.591 10.509C16.949 12.0141 14.952 14.9834 13.625 16.1768C13.625 16.1768 13.284 16.5129 13.071 16.659C12.765 16.887 12.386 17 12.007 17C11.584 17 11.19 16.8724 10.869 16.6308Z" fill="currentColor"></path>
									</svg>
								</span>@Html.Raw(Utility.DisplayShowName(child2.Name, child2.IsShow))
								@if (Model.ListModuleProduct.Count(x => x.ParentId == child2.Id) > 0)
								{
									<span class="badge bg-danger" style="margin-left:5px;">@Model.ListModuleProduct.Count(x => x.ParentId == child2.Id)</span>
								}
							</td>
							<td class="text-center">@Html.Raw(StaticEnum.Show(child2.IsShow))</td>
							<td class="text-center">
								<input type="checkbox" id="Check@(child2.Id)" data-type="product" data-title="@child2.Name" class="minimal check" @(("," + Model.selectedValue + ",").Contains("," + child2.Id + ",") ? "checked" : string.Empty) value="@child2.Id">
								<label for="Check@(child2.Id)"></label>
							</td>
						</tr>
						foreach (var child3 in Model.ListModuleProduct.Where(x => x.ParentId == child2.Id).OrderBy(x => x.OrderDisplay))
						{
							<tr id="item_@(child3.Id)" class="child-@item.Id child-@child2.Id level-3" data-id="@child2.Id">
								<td class="open-child active" data-id="@child3.Id" data-level="4" style="padding-left: 150px">
									<span class="lnr lnr-chevron-down" style="margin-right: 5px;">
										<svg class="icon-20" width="20" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
											<path d="M10.869 16.6308C10.811 16.5743 10.563 16.3609 10.359 16.1622C9.076 14.9971 6.976 11.9576 6.335 10.3668C6.232 10.1252 6.014 9.51437 6 9.18802C6 8.8753 6.072 8.5772 6.218 8.29274C6.422 7.93814 6.743 7.65368 7.122 7.49781C7.385 7.39747 8.172 7.2416 8.186 7.2416C9.047 7.08573 10.446 7 11.992 7C13.465 7 14.807 7.08573 15.681 7.21335C15.695 7.22796 16.673 7.38383 17.008 7.55431C17.62 7.86702 18 8.47784 18 9.13151V9.18802C17.985 9.61374 17.605 10.509 17.591 10.509C16.949 12.0141 14.952 14.9834 13.625 16.1768C13.625 16.1768 13.284 16.5129 13.071 16.659C12.765 16.887 12.386 17 12.007 17C11.584 17 11.19 16.8724 10.869 16.6308Z" fill="currentColor"></path>
										</svg>
									</span>@Html.Raw(Utility.DisplayShowName(child3.Name, child3.IsShow))
									@if (Model.ListModuleProduct.Count(x => x.ParentId == child3.Id) > 0)
									{
										<span class="badge bg-danger" style="margin-left:5px;">@Model.ListModuleProduct.Count(x => x.ParentId == child3.Id)</span>
									}
								</td>
								<td class="text-center">@Html.Raw(StaticEnum.Show(child3.IsShow))</td>
								<td class="text-center">
									<input type="checkbox" id="Check@(child3.Id)" data-type="product" data-title="@child3.Name" class="minimal check" @(("," + Model.selectedValue + ",").Contains("," + child3.Id + ",") ? "checked" : string.Empty) value="@child3.Id">
									<label for="Check@(child3.Id)"></label>
								</td>
							</tr>
							foreach (var child4 in Model.ListModuleProduct.Where(x => x.ParentId == child3.Id).OrderBy(x => x.OrderDisplay))
							{
								<tr id="item_@(child4.Id)" class="child-@item.Id child-@child3.Id level-4" data-id="@child3.Id">
									<td class="open-child open-child- active" data-id="@child4.Id" data-level="5" style="padding-left: 200px">
										<span class="lnr lnr-chevron-down" style="margin-right: 5px;">
											<svg class="icon-20" width="20" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
												<path d="M10.869 16.6308C10.811 16.5743 10.563 16.3609 10.359 16.1622C9.076 14.9971 6.976 11.9576 6.335 10.3668C6.232 10.1252 6.014 9.51437 6 9.18802C6 8.8753 6.072 8.5772 6.218 8.29274C6.422 7.93814 6.743 7.65368 7.122 7.49781C7.385 7.39747 8.172 7.2416 8.186 7.2416C9.047 7.08573 10.446 7 11.992 7C13.465 7 14.807 7.08573 15.681 7.21335C15.695 7.22796 16.673 7.38383 17.008 7.55431C17.62 7.86702 18 8.47784 18 9.13151V9.18802C17.985 9.61374 17.605 10.509 17.591 10.509C16.949 12.0141 14.952 14.9834 13.625 16.1768C13.625 16.1768 13.284 16.5129 13.071 16.659C12.765 16.887 12.386 17 12.007 17C11.584 17 11.19 16.8724 10.869 16.6308Z" fill="currentColor"></path>
											</svg>
										</span>@Html.Raw(Utility.DisplayShowName(child4.Name, child4.IsShow))
										@if (Model.ListModuleProduct.Count(x => x.ParentId == child4.Id) > 0)
										{
											<span class="badge bg-danger" style="margin-left:5px;">@Model.ListModuleProduct.Count(x => x.ParentId == child4.Id)</span>
										}
									</td>
									<td class="text-center">@Html.Raw(StaticEnum.Show(child4.IsShow))</td>
									<td class="text-center">
										<input type="checkbox" id="Check@(child4.Id)" data-type="product" data-title="@child4.Name" class="minimal check" @(("," + Model.selectedValue + ",").Contains("," + child4.Id + ",") ? "checked" : string.Empty) value="@child4.Id">
										<label for="Check@(child4.Id)"></label>
									</td>
								</tr>
							}
						}
					}
				}
			}
		}
	</tbody>
</table>

<script>
	// ValidInput();
	$('#tblGridAjax .checkAll').click(function () {
		var textContainer = "#Text_ModuleValues";
		var hiddenContainer = "#Value_ModuleValues";
		$('#tblGridAjax input.check[type=checkbox]').not(".checkAll").not("#checkAll").prop("checked", $(this).is(":checked"));
		$('#tblGridAjax input[type=checkbox]').not(".checkAll").each(function () {
			var text = $(textContainer).text();
			var values = $(hiddenContainer).val();
			var arrVal = values != '' ? values.split(',') : [];
			var val = $(this).val();
			var txt = $(this).data("title");
			var v = $(this).is(":checked");
			if (v == true) {
				if (containsObject(val, arrVal) == false) {
					arrVal.push(val);
					text += ',' + txt;
				}
			}
			else {
				if (containsObject(val, arrVal) == true) {
					removeElement(arrVal, val);
					text = (',' + text + ',').replace(',' + txt + ',', ',');
				}
			}
			if (arrVal != null) {
				if (text.startsWith(',')) {
					text = text.substring(1);
				}
				if (text.endsWith(',')) {
					text = text.substring(0, (text.length - 1));
				}
				$(textContainer).html(text);
				$(hiddenContainer).val(arrVal.toString());
			}
			else {
				$(textContainer).html('');
				$(hiddenContainer).val('');
			}
		});
	});
	$(function () {
		var textContainer = "#Text_ModuleValues";
		var hiddenContainer = "#Value_ModuleValues";

		// Khởi tạo giá trị ban đầu cho #Text_ModuleValues và #Value_ModuleValues là rỗng
		$(textContainer).html('');
		$(hiddenContainer).val('');

		$('#tblGridAjax input[type=checkbox]').not(".checkAll").change(function () {
			var text = $(textContainer).text();
			var values = $(hiddenContainer).val();
			var arrVal = values !== '' ? values.split(',') : [];
			var arrText = text !== '' ? text.split(',') : [];

			var val = $(this).val();
			var txt = $(this).data("title");
			var isChecked = $(this).is(":checked");

			if (isChecked) {
				// Nếu checkbox được chọn, thêm giá trị và văn bản vào mảng
				if (!containsObject(val, arrVal)) {
					arrVal.push(val);
					arrText.push(txt);
				}
			} else {
				// Nếu checkbox bị bỏ chọn, xóa giá trị và văn bản khỏi mảng
				if (containsObject(val, arrVal)) {
					removeElement(arrVal, val);
					removeElement(arrText, txt);
				}
			}

			// Cập nhật giá trị của #Text_ModuleValues và #Value_ModuleValues
			$(textContainer).html(arrText.join(','));
			$(hiddenContainer).val(arrVal.join(','));

			// Xử lý trường hợp không có giá trị
			if (arrVal.length === 0) {
				$(textContainer).html('');
				$(hiddenContainer).val('');
			}
		});

	});
	
	
	$(function () {
		$('.open-child .lnr-chevron-down').on('click', function () {
			let parent = $(this).parents('.open-child')
			let id = parent.data('id');
			if (parent.hasClass('active')) {
				$('.child-' + id).addClass('hide');
				$('.child-' + id + '.open-child').removeClass('active');
				parent.removeClass('active');
			}
			else {
				let lvel = parent.data('level');
				$('.child-' + id + '.level-' + lvel).removeClass('hide');
				parent.addClass('active');
			}

		});
	});
</script>


@* <script>
	$(function () {
		$('.open-child-').click(function () {
			var id = $(this).data('id');
			if ($(this).hasClass('active')) {
				$('.child-' + id).addClass('hide');
				$('.child-' + id + ' .open-child-').removeClass('active');
				$(this).removeClass('active');
			}
			else {
				var lvel = $(this).data('level');
				$('.child-' + id + '.level-' + lvel).removeClass('hide');
				$(this).addClass('active');
			}
		});
	});
</script> *@
<style>
	.lnr-chevron-down {
		margin-right: 5px;
	}

	.tblGridAjax tr td {
		font-weight: 600;
	}

	.tblGridAjax .level-1 td, .tblGridAjax .level-2 td, .tblGridAjax .level-3 td, .tblGridAjax .level-4 td {
		font-weight: 400;
	}

	.tblGridAjax tr td.active .badge {
		display: none;
	}

	.tblGridAjax tr.level-1 td:nth-child(1) {
		padding-left: 22px;
	}

	.tblGridAjax tr.level-2 td:nth-child(1) {
		padding-left: 41px;
	}

	.tblGridAjax tr.level-3 td:nth-child(1) {
		padding-left: 60px;
	}

	.tblGridAjax tr.level-4 td:nth-child(1) {
		padding-left: 70px;
	}

	.tblGridAjax tr td label {
		cursor: pointer;
		display: block;
	}

	.hide {
		display: none;
	}

	.open-child {
		cursor: pointer;
	}
</style>

